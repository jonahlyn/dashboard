#!/usr/bin/env ansible-playbook
# 
# Requirements: python3
# 
# Usage: 
# 
# ```
# pipenv install
# pipenv shell
# ./provisioner.yml -K
# ```


- hosts: localhost
  become: true

  vars_files:
    - vars/main.yml

  pre_tasks:
    - name: Update apt cache
      apt: 
        update_cache: yes

  roles:
    - mariadb
    # - { role: mysql, db_name: "{{ db_name}}", db_user: "{{ db_user }}", db_pass: "{{ db_pass }}" }

  handlers:
      - name: restart gunicorn
        systemd:
          name: gunicorn.socket
          state: restarted

      - name: restart nginx
        systemd:
          name: nginx
          state: restarted
        notify: restart gunicorn

  tasks:

    ########## Install and Configure Dependencies ##########
    # http://nginx.org/en/docs/

    # - name: Install packages
    #   raw: sudo apt-get -y install firewalld nginx

    # 3/14/2019 - cannot install packages with apt under Python3
    - name: Install packages
      apt:
        name: "{{ packages }}"
      vars:
        packages:
        - firewalld
        - nginx

    - name: Enable nginx to start at boot
      systemd:
        name: nginx
        state: started
        enabled: yes

    ########## Install and configure firewall ##########

    # todo

    ########## Configure HTTPS ##########

    # todo

    ########## Install the Application ##########

    - name: Create an application directory
      file: 
        path: "{{ project_root }}"
        state: directory
        owner: "{{ service_user }}"
        group: "{{ service_group }}"

    - name: Copy the application files into the app directory
      copy:
        src: ../app/
        dest: "{{ project_root }}"
        owner: "{{ service_user }}"
        group: "{{ service_group }}"

    - name: Check if a virtualenv is already created
      environment:
        PIPENV_VENV_IN_PROJECT: true
      ignore_errors: true
      command: "pipenv --venv"
      args:
        chdir: "{{ project_root }}"
      register: pipenv_venv_check_cmd
      changed_when:
        - ('No virtualenv' not in pipenv_venv_check_cmd.stderr)

    - name: Run a pipenv install
      environment:
        PIPENV_VENV_IN_PROJECT: true
      command: "pipenv --bare install"
      args:
        chdir: "{{ project_root }}"
      when:
        - ('No virtualenv' in pipenv_venv_check_cmd.stderr)


    ########## Configure Nginx ##########
    # http://docs.gunicorn.org/en/latest/deploy.html

    - name: Copy new nginx configuration into place
      template:
        src: templates/nginx/nginx.conf.j2
        dest: /etc/nginx/nginx.conf
        backup: yes
      notify: restart nginx

    - name: Disable default nginx site
      file:
        name: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx

    - name: Copy a simple dashapp configuration in place
      template:
        src: templates/nginx/dashapp.config.j2
        dest: /etc/nginx/sites-available/dashapp.config
        backup: yes
      notify: restart nginx

    - name: Copy complex dashapp configuration into place
      template:
        src: templates/nginx/dashapp-gunicorn.config.j2
        dest: /etc/nginx/sites-available/dashapp-gunicorn.config
        backup: yes
      notify: restart nginx

    - name: Enable the new configuration by creating symlink
      file:
        src: /etc/nginx/sites-available/dashapp-gunicorn.config
        dest: /etc/nginx/sites-enabled/dashapp-gunicorn.config
        state: link
      notify: restart nginx


    ########## Configure Gunicorn Service ##########
    # http://docs.gunicorn.org/en/latest/deploy.html
    # https://simpleit.rocks/python/django/set-up-ubuntu-to-serve-a-django-website-step-by-step/

    - name: Configure the gunicorn systemd service
      template:
        src: templates/systemd/gunicorn.service.j2
        dest: /etc/systemd/system/gunicorn.service
      notify: restart gunicorn

    - name: Configure the gunicorn socket
      template:
        src: templates/systemd/gunicorn.socket.j2
        dest: /etc/systemd/system/gunicorn.socket
      notify: restart gunicorn

    - name: Configure the gunicorn temporal file
      template:
        src: templates/systemd/gunicorn.conf.j2
        dest: /etc/tmpfiles.d/gunicorn.conf
      notify: restart gunicorn

    - name: Start gunicorn service and enable at boot
      systemd: 
        name: gunicorn.socket
        state: started
        enabled: yes
